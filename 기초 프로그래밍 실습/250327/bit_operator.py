'''
<<, >> 비트 연산자
위 연산자는 비트 연산자 중 shift 연산자로 
가르키는 방향으로 한 칸 씩 움직이고, 자리가 없으면 값을 버리고,
새로 생기는 값은 기존 singed 인 경우 0이면 0 1이면 1을 그대로 만든다
왜냐하면 첫 비트는 양수인지, 음수인지를 표시하기 때문이다.

a = 5
a = a << 1
print(a) 
# 5 에서 왼쪽으로 한 칸 밀면
# 5(0b0101) -> 10(0b1010) 이 된다.
# 반대로 >> 을 사용한다면 2(0b0010) 이 된다.

&(AND), |(OR), ^(XOR), ~(NOT) 연산자
위 연산자들은 논리 비트 연산자로

& 연산자는 두 값이 1이면 1 하나라도 0이면 0으로 한다.

a = 10
a & 1 을 하면 10(0b1010) 과 1(0b0001) 을 비교해 
2(0b0000) 가 된다.

|(OR) 연산자
위 연산자는 하나만 1이라면 1 둘 다 0이여야만 0으로 한다.
a = 10
a | 1 을 하면 10(0b1010) 과 1(0b0001) 을 비교해 
11(0b1011) 이 된다.

^(XOR) 연산자
위 연산자는 두 값이 다르면 1 같으면 0으로 한다.
a = 10
a ^ 1 을 하면 10(0b1010) 과 1(0b0001) 을 비교해 
11(0b1011) 이 된다.

~(NOT) 연산자
위 연산자 단항 연산자로 옛날에 음수를 표현할 때 썼다.
현재는 맨 앞 비트가 양수인지 음수인지를 나타내지만,
옛날에는 ~로 음수를 표현했다 +5(0b0101) 에 ~을 하면
-6(0b1010) 이 되고 여기서 1을 더해서 -5(0b1011)가 됐다.
1을 더하는 이유는 0이 있기 때문이다.
'''